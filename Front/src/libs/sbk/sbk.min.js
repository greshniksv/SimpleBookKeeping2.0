

// -= Auto generated 01-12-2024 02:03:51 =-


// #### session.js
﻿class Session {
    static Dialogs = [];
    static CurrentPage = null;
}

// #### tools.js
﻿class Tools {

    static BackFunction = null;

    static GuidEmpty() {
        return "00000000-0000-0000-0000-000000000000";
    }

    static AddDialog(dialog) {
        if (typeof dialog.Init != "undefined") {
            Session.Dialogs.push(dialog);
        } else {
            console.warn("Dialog doesn't have Init function!");
        }
    }

    static PushNotification(type, text) {

        var top = $(window).height() - 150;
        var width = $(window).width();

        if (type === "success") {
            $("#notify_success").css("left", "-" + width + "px");
            $("#notify_success").css("top", top + "px");
            $("#notify_success_text").html(text);
            $("#notify_success").css("visibility", "visible");
            $("#notify_success").css("opacity", "1");

            $("#notify_success").animate({
                left: 0
            }, 'slow', function () {
                window.setTimeout(function () {
                    $("#notify_success").animate({ opacity: 0 }, 1000);
                }, 1500);
            });
        }

        if (type === "fail") {
            $("#notify_fail").css("left", "-" + width + "px");
            $("#notify_fail").css("top", top + "px");
            $("#notify_fail_text").html(text);
            $("#notify_fail").css("visibility", "visible");
            $("#notify_fail").css("opacity", "1");

            $("#notify_fail").animate({
                left: 0
            }, 'slow', function () {
                window.setTimeout(function () {
                    $("#notify_fail").animate({ opacity: 0 }, 1000);
                }, 3500);
            });
        }
    }

    static ShowLoading() {
        $.blockUI({
            message: $('div.block-ui'),
            fadeIn: 100,
            //fadeOut: 200,
            //timeout: 2000,
            showOverlay: true,
            centerY: true,
            css: {
                //width: '350px',
                //top: '10px',
                //left: '',
                //right: '10px',
                border: 'none',
                padding: '15px',
                backgroundColor: '#000',
                '-webkit-border-radius': '10px',
                '-moz-border-radius': '10px',
                opacity: .6,
                color: '#fff'
            }
        });
    }

    static HideLoading() {
        window.setTimeout($.unblockUI, 500);
    }

    static backData = []
    static GoBack() {
        //if (Tools.backData.length < 2) {
        //    return;
        //}

        if (Tools.BackFunction.constructor.name == "Back") {
            Tools.BackFunction.Invoke();
        }

        //var cur = Tools.backData[Tools.backData.length - 2];
        //var items = [];

        //for (let i = 0; i <= Tools.backData.length - 2; i++) {
        //    items.push(Tools.backData[i]);
        //}
        //Tools.backData = items;

        //Tools.SwichDialog(cur.pageName, cur.params, true);
    }

    static SwichDialog(pageName, params, isBack) {

        if (typeof isBack == "undefined") {
            Tools.backData.push({ pageName: pageName, params: params });
        }

        if (Session.CurrentPage === pageName) {
            console.log("Page '" + pageName + "' already opened!");
            return;
        }

        var activeDialog = $(".dialog:visible").first();
        var width = $(window).width() + 10;
        var newDialog = $("#" + pageName);

        newDialog.css('left', '-' + width + 'px');
        newDialog.css('position', 'absolute');
        newDialog.css('width', width + "px");

        newDialog.show();

        activeDialog.css('position', 'absolute');
        activeDialog.css('top', '60px');
        activeDialog.css('left', '0px');
        activeDialog.css('width', width + "px");


        activeDialog.animate({
            left: width
        }, 'slow', function () {
            activeDialog.hide();
            activeDialog.css('position', 'relative');
            activeDialog.css('top', 'auto');
            activeDialog.css('left', 'auto');
            activeDialog.css('width', "auto");
        });

        newDialog.animate({
            left: 0
        }, 'slow', function () {
            newDialog.css('position', 'relative');
            newDialog.css('top', 'auto');
            newDialog.css('left', 'auto');
            newDialog.css('width', "auto");
        });

        Session.CurrentPage = pageName;
        var dialogs = Session.Dialogs;
        for (let i = 0; i < dialogs.length; i++) {
            if (dialogs[i].name == pageName) {
                $("#main_title").html(dialogs[i].title);
                Tools.BackFunction = dialogs[i].GetBack();
                dialogs[i].Init(params);
                break;
            }
        }
    }
}

// #### _dialog-base.js
﻿class DialogBase {

    static name = "BASE_NAME";

    static title = "BASE_TITLE";

    static Init() {
        console.log("Init not implemented!");
    }

    static GetBack() {
        console.log("GetBack not implemented!");
    }
}

class Back {

    constructor(name, param) {
        this.name = name;
        this.param = param;
    }

    Invoke() {
        Tools.SwichDialog(this.name, this.param);
    }
}

// #### auth.js
﻿class Auth {

    static getToken(userName, password, onSuccess, onError) {

        $.ajax({
            url: AUTH_BASE_HOST + '/connect/token',
            method: 'post',
            dataType: 'json',
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            data: "grant_type=password&username=" + userName + "&password=" + password + "&client_id=client",
            success: function (data) {
                data["created"] = new Date();
                localStorage.setItem('auth', JSON.stringify(data));

                if (typeof onSuccess != "undefined") {
                    onSuccess();
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                // xhr.status - status code
                console.log("Error AUTH: " + xhr + "Code:" + xhr.status);

                if (typeof onError != "undefined") {
                    onError();
                }
            }
        });
    }

    static refreshToken(onSuccess, onError) {

        var data = JSON.parse(localStorage.getItem('auth'));

        if (typeof data == "undefined") {
            console.log("refreshToken. There is no 'auth' in localStorage");
            return;
        }

        var refresh_token = data.refresh_token;

        if (typeof refresh_token == "undefined") {
            console.log("refreshToken. There is no 'refresh_token' in 'auth' in localStorage");
            return;
        }

        $.ajax({
            url: AUTH_BASE_HOST + '/connect/token',
            method: 'post',
            dataType: 'json',
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            data: "grant_type=refresh_token&client_id=client&refresh_token=" + refresh_token,
            success: function (data) {
                data["created"] = new Date();
                localStorage.setItem('auth', JSON.stringify(data));

                if (typeof onSuccess != "undefined") {
                    onSuccess();
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                // xhr.status - status code
                console.log("Error AUTH: " + xhr + "Code:" + xhr.status);

                if (typeof onError != "undefined") {
                    onError();
                }
            }
        });
    }
}

// #### base-api.js
﻿

// #### request-engine.js
﻿class AjaxRequestEngine {

    static Execute(request) {
        if (!request instanceof AjaxRequest) {
            console.log("Request has invalid type: " + request.constructor.name);
            return;
        }

        if (typeof localStorage.getItem('auth') != "undefined" && localStorage.getItem('auth') != null) {
            var token = JSON.parse(localStorage.getItem('auth')).access_token;
        } else {
            Tools.SwichDialog("auth_dialog");
            return;
        }
        
        if (typeof token == "undefined" || token == null) {
            Tools.SwichDialog("auth_dialog");
            return;
        }

        $.ajax({
            url: BASE_HOST + request.url,
            method: request.method,
            dataType: request.dataType,
            contentType: request.contentType,
            data: request.data,
            cache: false,
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {

                if (typeof request.onSuccess != "undefined") {
                    request.onSuccess(data);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {

                if (xhr.status == 401) { // Unauthorized
                    Auth.refreshToken(function () {

                        var token = JSON.parse(localStorage.getItem('auth')).access_token;
                        if (typeof token == "undefined" || token == null) {
                            Tools.SwichDialog("auth_dialog");
                            return;
                        }

                        $.ajax({
                            url: BASE_HOST + request.url,
                            method: request.method,
                            dataType: request.dataType,
                            contentType: request.contentType,
                            data: request.data,
                            headers: { "Authorization": "Bearer " + token },
                            success: function (data) {

                                if (typeof request.onSuccess != "undefined") {
                                    request.onSuccess(data);
                                }
                            },
                            error: function (xhr, ajaxOptions, thrownError) {

                                if (xhr.status == 401) { // Unauthorized
                                    Tools.SwichDialog("auth_dialog");
                                    return;
                                }

                                if (typeof request.onError != "undefined") {
                                    request.onError(data);
                                }
                            }
                        });

                    }, function () {
                        Tools.SwichDialog("auth_dialog");
                        return;
                    });
                }

                if (typeof request.onError != "undefined") {
                    request.onError(data);
                }
            }
        });
    }
}

// #### settings.js
﻿var BASE_HOST = "https://localhost:6001/api"
var AUTH_BASE_HOST = "https://localhost:6001"

// #### auth-dialog.js
﻿class AuthDialog extends DialogBase {

    static name = "auth_dialog";

    static title = "Авторизация";

    static Show() {
        $.blockUI({
            message: $('#login_form'),
            css: { width: '80%', left: '10%' }
        });
    }

    static GetBack() {
    }

    static Login() {

        var username = $("#auth_username").val();
        var password = $("#auth_password").val();

        var onSuccess = function () {
            Tools.SwichDialog("home_dialog");
        };

        var onError = function () {
            $("#auth_loader").hide();
            $("#auth_button").show();
        };

        Auth.getToken(username, password, onSuccess, onError);

        $("#auth_loader").show();
        $("#auth_button").hide();
    }
}

Tools.AddDialog(AuthDialog);

// #### cost-dialog.js
﻿class CostDialog extends DialogBase {

    static name = "cost_dialog";
    static title = "Расходы";
    static planId = undefined;

    static Init(planId) {
        console.log("Init cost:" + planId);

        CostDialog.planId = planId;

        if (typeof planId == "undefined") {
            console.error("Plan not exist");
            return;
        }

        Tools.ShowLoading();
        var req = AjaxRequest.Get("/v1/Cost/byPlan/" + planId, function (data) {
            console.log("loading users");
            Tools.HideLoading();

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            CostDialog.LoadingCosts(data.result);
        }, function () { Tools.HideLoading(); });

        AjaxRequestEngine.Execute(req);
    }

    static GetBack() {
        return new Back("new_plan_dialog", CostDialog.planId)
    }

    static GoToNewCosts() {
        Tools.SwichDialog("new_cost_dialog", { "plan": CostDialog.planId, "cost": undefined });
    }

    static EditCost(costId) {
        Tools.SwichDialog("new_cost_dialog", { "plan": CostDialog.planId, "cost": costId });
    }

    static LoadingCosts(costs) {

        /**
        {
          "result": [
            {
              "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "planId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "name": "string",
              "costDetails": [
                {
                  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "date": "2024-11-27T10:58:24.427Z",
                  "value": 5000000
                }
              ]
            }
          ]
        }
         */


        $("#cost_list a").remove();
        var totalSum = 0;

        $.each(costs, function (i, v) {

            var sum = 0;
            $.each(v.costDetails, function (i, v) {
                sum += v.value;
            });

            totalSum += sum;

            var item = `
            <a href="#" onclick="CostDialog.EditCost('`+ v.id + `')" class="cost-item list-group-item list-group-item-action" aria-current="true">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">` + v.name + `</h5>
                    <small> * </small>
                </div>
                <small>Баланс: `+ sum.toLocaleString() + ` руб.</small>
            </a>
            `;

            $("#cost_list").append(item);
        });

        $("#total_sum").html("Сумма: " + totalSum.toLocaleString() + " руб");

        $('.cost-item').hover(
            function () { $(this).addClass('active') },
            function () { $(this).removeClass('active') }
        );

    }

}

Tools.AddDialog(CostDialog);

// #### home-dialog.js
﻿class HomeDialog extends DialogBase {

    static name = "home_dialog";
    static title = "Главная";

    static Init() {
        console.log("Init home");

        Tools.ShowLoading();
        
        var req = AjaxRequest.Get("/v1/PlanStatus", function (data) {
            console.log("loading plan");

            Tools.HideLoading();
            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            HomeDialog.LoadingForm(data.result);
            HomeDialog.LoadingMenu(data.result);

        }, function () { Tools.HideLoading(); });

        AjaxRequestEngine.Execute(req);
    }

    /**
     {
      "result": [
        {
          "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
          "name": "string",
          "balance": 0,
          "rest": 0,
          "progress": 0,
          "balanceToEnd": 0,
          "currentDateTime": "string",
          "costStatusModels": [
            {
              "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "name": "string",
              "balance": 0
            }
          ]
        }
      ]
    }
     */

    static LoadingForm(data) {

        $("#home_list a").remove();


        $.each(data, function (num, obj) {

            $(".main-plan-item").remove();

            var model = `

             <div class="main-plan-item form-control">

                <div class="row mb-1 pt-4">
                    <div class="col">
                        <div data-mdb-input-init class="form-outline">
                            <label class="form-label"> <h1> `+ obj.name +`</h1> </label>
                        </div>
                    </div>
                </div>


                <div class="row mb-4">
                    <div class="col">
                        <div data-mdb-input-init class="form-outline">
                            <label class="form-label"> В кошельке: `+ obj.balance +` </label>
                        </div>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col">
                        <div data-mdb-input-init class="form-outline">
                            <label class="form-label"> Текущее время: `+ obj.currentDateTime +` </label>
                        </div>
                    </div>
                </div>

                <div class="progress">
                    <div style=" width: `+ obj.progress+`% " class="progress-bar" role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"></div>
                </div>

                <div id="home_list" class="list-group pt-4">

            `;

            $.each(obj.costStatusModels, function (i, v) {
                model += `
                 <a href="#" class="list-group-item list-group-item-action" aria-current="true">
                    <div class="d-flex w-100 justify-content-between">
                        <h7 class="mb-1">`+ v.name + `</h7>
                        <small>`+ v.balance + ` руб</small>
                    </div>
                </a>
                `;
            });

            model += `
                            </div>

            </div>
            `;

            $("#home_base").html(model);
        });

    }

    static LoadingMenu(data) {

        //navbarPlanCosts

        $(".main-plan-index").remove();

        $.each(data, function (num, obj) {

            var title = `
                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                    `+ obj.name + `
                </a>
            `;

            var items = "";

            $.each(obj.costStatusModels, function (i, v) {

                items += `
                <li>
                    <a class="dropdown-item" onclick="HomeDialog.GoToSpend('`+ v.id + `')" href="#">` + v.name + `</a>
                </li>
                `;
            });

            var model = `

                <ul class="main-plan-index navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="#" onclick="Home()">Главная</a>
                    </li>
                    <li class="nav-item dropdown">
                      `+ title + `
                        <ul id="main_costs" class="dropdown-menu" aria-labelledby="navbarDropdown">
                           `+ items + `
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#" onclick="Settings()">Настроки</a>
                    </li>
                </ul>
            `;

            $("#navbarPlanCosts").append(model);
        });

        $('.navbar-nav>li>a:not([data-bs-toggle^="dropdown"])').on('click', function (i, v) {
            $('.navbar-collapse').collapse('hide');
        });

        $('.dropdown-menu>li>a:not([data-bs-toggle^="dropdown"])').on('click', function (i, v) {
            $('.navbar-collapse').collapse('hide');
        });
    }

    static GoToSpend(id) {
        Tools.SwichDialog("spend_dialog", id);
    }

}

Tools.AddDialog(HomeDialog);

// #### new-cost-dialog.js
﻿class NewCostDialog extends DialogBase {

    static name = "new_cost_dialog";
    static title = "Новай расход";
    static planId = undefined;
    static costId = undefined;


    static Init(model) {
        console.log("Init new cost. Plan:" + model.plan + ", Cost:" + model.cost);

        NewCostDialog.planId = model.plan;
        NewCostDialog.costId = model.cost;

        $('#cost_generator').collapse('hide');

        $("#cost_accordion").find("button[data-toggle=collapse]").on("click", function () {
            $(".collapse").collapse('hide');
            var id = $(this).attr("data-target");
            $(id).collapse('show');
        });

        if (typeof model.cost == "undefined") {
            NewCostDialog.costId = Tools.GuidEmpty();
            $("#cost_costid").val(Tools.GuidEmpty());
        }

        if (typeof NewCostDialog.planId == "undefined") {
            console.error("plain id is null");
            return;
        }

        if (typeof model.cost != "undefined") {

            Tools.ShowLoading();
            var req = AjaxRequest.Get("/v1/Cost/" + NewCostDialog.costId, function (data) {
                console.log("loading costs");
                Tools.HideLoading();

                if (typeof data.result == "undefined") {
                    console.error(data);
                    return;
                }

                NewCostDialog.LoadingCosts(data.result);
            }, function () { Tools.HideLoading(); });

            AjaxRequestEngine.Execute(req);

        } else {

            Tools.ShowLoading();
            var req = AjaxRequest.Get("/v1/Cost/generate/" + NewCostDialog.planId, function (data) {
                console.log("generate costs");
                Tools.HideLoading();

                if (typeof data.result == "undefined") {
                    console.error(data);
                    return;
                }

                NewCostDialog.LoadingCosts(data.result);
            }, function () { Tools.HideLoading(); });

            AjaxRequestEngine.Execute(req);
        }
    }

    static GetBack() {
        return new Back("cost_dialog", NewCostDialog.planId);
    }

    static LoadingCosts(costs) {

        /*
        {
          "result": {
            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "planId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "name": "string",
            "costDetails": [
              {
                "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "date": "2024-11-27T09:52:33.751Z",
                "value": 5000000
              }
            ]
          }
        }
        */


        $("#cost_planid").val(costs.planId);
        $("#cost_name").val(costs.name);

        $("div.cost-details-item").remove();
        $.each(costs.costDetails, function (i, v) {

            var date = new Date(v.date);
            var dayOfWeek = date.getDay();
            var className = (dayOfWeek == 6 || dayOfWeek == 0 ? "weekend" : "");

            var item = `
                <div class="mb-3 cost-details-item" data-day='`+ dayOfWeek +`' >
                    <div class="col-auto">
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <div class="input-group-text"> `+ date.toLocaleDateString("ru-RU") + ` </div>
                            </div>
                            <input type="text" code='` + v.id + `' date='` + v.date + `' value='` + v.value + `' class="cost-detail form-control ` + className +`">
                        </div>
                    </div>
                </div>
                `;

            $("#cost_details").append(item);
        });
        
    }
    static Delete() {
        var req = AjaxRequest.Delete("/v1/Cost/" + NewCostDialog.costId, function (data) {
            Tools.SwichDialog("cost_dialog", NewCostDialog.planId);
        });

        AjaxRequestEngine.Execute(req);
    }

    static Generate() {

        var value = $("#newcost_generator_sum").val();
        $("input.dow:checked").each(function (i, v) {
            var dow = $(this).attr("data-dow");

            $("div[data-day=" + dow + "]").find("input").val(value);
        });

        $('#cost_generator').collapse('hide');
    }

    static Save() {

        var costDetails = [];

        $(".cost-detail").each(function (i, v) {
            costDetails.push({
                "id": $(v).attr("code"),
                "date": $(v).attr("date"),
                "value": $(v).val()
            });
        });

        var model = {
            "id": NewCostDialog.costId,
            "planId": NewCostDialog.planId,
            "name": $("#cost_name").val(),
            "costDetails": costDetails
        };

        var req = AjaxRequest.Post("/v1/Cost", model, function (data) {

            Tools.SwichDialog("cost_dialog", NewCostDialog.planId); 
        });

        AjaxRequestEngine.Execute(req);
    }

    static Cancel() {
        Tools.SwichDialog("cost_dialog", NewCostDialog.planId);
    }
}

Tools.AddDialog(NewCostDialog);

// #### new-plan-dialog.js
﻿class NewPlanDialog extends DialogBase {

    static name = "new_plan_dialog";
    static title = "Новый план";
    static planId = undefined;

    static Init(planId) {
        console.log("Init new plan");

        $("#newpaln_id").val("");
        $("#newplan_start").val("");
        $("#newplan_end").val("");
        $("#newplan_name").val("");
        $("#newplan_balance").val("");
        $('#newplan_users').val(null).trigger('change');


        $('#newplan_users').select2({
            theme: "bootstrap-5",
            width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',
            placeholder: $(this).data('placeholder'),
            closeOnSelect: false,
            allowClear: true
        });

        $("#new_plan_accordion").find("button[data-toggle=collapse]").on("click", function () {
            $(".collapse").collapse('hide');
            var id = $(this).attr("data-target");
            $(id).collapse('show');
        });
        
        $('#collapseOne').collapse('hide');
        $("#collapseTwo").collapse('hide');


        Tools.ShowLoading();
        // Loading user list
        var req = AjaxRequest.Get("/v1/User", function (data) {
            console.log("loading users");

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            NewPlanDialog.LoadingUsers(data.result);

            // Loading existing plan
            if (typeof planId != "undefined") {
                NewPlanDialog.planId = planId;
                var req = AjaxRequest.Get("/v1/Plan/" + planId, function (data) {

                    Tools.HideLoading();
                    if (typeof data.result == "undefined") {
                        console.error(data);
                        return;
                    }

                    NewPlanDialog.LoadPlan(data.result);
                    $("#collapseTwo").collapse('show');
                }, function () { Tools.HideLoading(); });

                AjaxRequestEngine.Execute(req);
            } else {
                $('#collapseOne').collapse('show');
                Tools.HideLoading();
            }

        }, function () { Tools.HideLoading(); });

        AjaxRequestEngine.Execute(req);
    }

    static GetBack() {
        return new Back("plan_dialog");
    }

    static GoToCost() {
        Tools.SwichDialog("cost_dialog", NewPlanDialog.planId ); 
    }

    static LoadPlan(plan) {

        $("#newpaln_accordion").html("Изменить план: " + plan.name);
        $("#newpaln_id").val(plan.id);
        $("#newplan_start").val(plan.start.split('T')[0].replace("-", "/").replace("-", "/"));
        $("#newplan_end").val(plan.end.split('T')[0].replace("-", "/").replace("-", "/"));
        $("#newplan_name").val(plan.name);
        $("#newplan_balance").val(plan.balance);

        var arr = [];
        $.each(plan.userMembers, function (i, v) {
            arr.push(v);
        });

        $('#newplan_users').val(arr);
        $('#newplan_users').trigger('change');
    }

    static LoadingUsers(users) {

        $.each(users, function (i, v) {

            var data = {
                id: v.id,
                text: v.name
            };

            if ($('#newplan_users').find("option[value='" + data.id + "']").length == 0) {
                var newOption = new Option(data.text, data.id, false, false);
                $('#newplan_users').append(newOption).trigger('change');
            } 
        });
    }

    static AddNewPlan() {

        var userMembers = [];

        var items = $('#newplan_users').select2('data');
        $.each(items, function (i, v) {
            userMembers.push(v.id);
        });

        //$("#newplan_users").find('option:selected').each(function (i, v) {
        //    userMembers.push($(v).attr('id'));
        //});

        var planId = $("#newpaln_id").val();

        if (typeof planId == "undefined" || planId.length < 10) {
            planId = Tools.GuidEmpty();
        }

        var model = {
            "id": planId,
            "start": $("#newplan_start").val(),
            "end": $("#newplan_end").val(),
            "name": $("#newplan_name").val(),
            "balance": $("#newplan_balance").val(),
            "userMembers": userMembers
        }

        var req = AjaxRequest.Post("/v1/Plan", model, function (data) {

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            Tools.SwichDialog("plan_dialog");
        });

        AjaxRequestEngine.Execute(req);
    }

    static Cancel() {
        Tools.SwichDialog("plan_dialog");
    }
}

Tools.AddDialog(NewPlanDialog);

// #### plan-dialog.js
﻿class PlanDialog extends DialogBase {

    static name = "plan_dialog";
    static title = "Планы";

    static Init() {
        console.log("Init plan");

        Tools.ShowLoading();
        var req = AjaxRequest.Get("/v1/Plan", function (data) {
            console.log("loading users");
            Tools.HideLoading();

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            PlanDialog.LoadingPlans(data.result);
        }, function () { Tools.HideLoading(); });

        AjaxRequestEngine.Execute(req);
    }

    static GetBack() {
        return new Back("settings_dialog");
    }

    static GoToNewPlan() {
        Tools.SwichDialog("new_plan_dialog");
    }

    static EditPlan(code) {
        Tools.SwichDialog("new_plan_dialog", code);
    }

    static LoadingPlans(plans) {

        function datediff(first, second) {
            return Math.round((second - first) / (1000 * 60 * 60 * 24));
        }

        $("#plan_list a").remove();

        $.each(plans, function (i, v) {

            var startDate = new Date(v.start);
            var endDate = new Date(v.end);
            var diff = datediff(startDate, endDate);

            var item = `
            <a href="#" onclick="PlanDialog.EditPlan('`+ v.id + `')" class="plan-item list-group-item list-group-item-action" aria-current="true">
            <div class="d-flex w-100 justify-content-between">

                <h5 class="mb-1">` + v.name + `</h5>
                <small>`+ diff + ` дней</small>
            </div>
            <p class="mb-1">Начиная с `+ startDate.toLocaleDateString("ru-RU") + ` по ` + endDate.toLocaleDateString("ru-RU") + `</p>
            <small>Баланс: `+ v.balance + ` руб.</small>
        </a>
            `;

            $("#plan_list").append(item);
        });

        $('.plan-item').hover(
            function () { $(this).addClass('active') },
            function () { $(this).removeClass('active') }
        );

    }

}

Tools.AddDialog(PlanDialog);

// #### settings-dialog.js
﻿class SettingsDialog extends DialogBase {

    static name = "settings_dialog";
    static title = "Настройки";

    static Init() {
        console.log("Init plan");
    }

    static GoToPlan() {
        Tools.SwichDialog("plan_dialog");
    }

    static GetBack() {
        return new Back("home_dialog");
    }
}

Tools.AddDialog(SettingsDialog);

// #### spend-dialog.js
﻿class SpendDialog extends DialogBase {

    static name = "spend_dialog";
    static title = "Траты";
    static spendId = null;

    static Init(spendId) {
        console.log("Init plan");

        if (typeof spendId == "undefined") {
            console.error("Spend not exist");
            return;
        }

        SpendDialog.spendId = spendId;
        Tools.ShowLoading();
        var req = AjaxRequest.Get("/v1/Spend/" + spendId, function (data) {
            console.log("loading spends");
            Tools.HideLoading();

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            SpendDialog.LoadingSpends(data.result);
        }, function () { Tools.HideLoading(); });

        AjaxRequestEngine.Execute(req);
    }

    static GetBack() {
        return new Back("home_dialog");
    }


    /**
     {
        "costId": "256a392e-c39c-43a6-b527-bf04e6134226",
        "costName": "Еда",
        "detailId": "0a0591ba-be35-4f6d-b07e-e26005eb2c0d",
        "date": "2024-11-29T06:00:00+03:00",
        "value": 2000,
        "spends": [
            {
                "id": "7acbdb31-517c-4c9e-8454-ec9237e994d1",
                "userId": "bea54459-3abb-4150-bfd8-ba68c6d5870c",
                "costDetail": {
                    "id": "0a0591ba-be35-4f6d-b07e-e26005eb2c0d",
                    "date": "2024-11-29T06:00:00+03:00",
                    "value": 2000
                },
                "value": 8000,
                "comment": "string",
                "image": ""
            }
        ]
    },
     */

    static LoadingSpends(spend) {

        var number = 0;
        var name = spend[0].costName;
        $("#main_title").html(SpendDialog.title + ": " + name);
        $(".accordion-item").remove();

        $.each(spend, function (i, v) {
            var date = new Date(v.date);
            var detailId = v.detailId;
            number += 10;

            var spendItem = "";
            $.each(v.spends, function (item, value) {

                var comment = $.base64.encode(value.comment);
                spendItem += `
                    <div class="mb-3">
                        <div class="col-auto">
                            <div class="input-group mb-2" data-costId='`+ v.costId + `' data-detailId='` + v.detailId + `' 
                                        data-spendid='` + value.id + `' data-value='` + value.value + `' data-comment='` + comment + `' >

                                <textarea class="input-group-text me-1 w-75 text-wrap text-start" autocomplete='off' > ` + value.comment + ` </textarea>
                                <input type="text" class="form-control ms-1" autocomplete='off' value="` + value.value + `" placeholder="">
                            </div>
                        </div>
                    </div>
                `;
            });

            var model = `
                <div class="accordion-item">
                    <h2 class="accordion-header" id="flush-headingOne">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                data-bs-target="#flush-collapse`+ number + `" aria-expanded="false" aria-controls="flush-collapse` + number + `">
                            `+ date.toLocaleDateString("ru-RU") + `
                        </button>
                    </h2>
                    <div id="flush-collapse`+ number + `" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
                        <div class="accordion-body" style="padding: 5px;">
                            <div class="form-control">
                                `+ spendItem + `
                                <div class="mb-3">
                                    <div class="col-auto">
                                        <div class="input-group mb-2" data-costId='`+ v.costId + `' data-detailId='` + v.detailId + `' 
                                                data-spendid='` + Tools.GuidEmpty() + `' data-value='' data-comment='' >
                                            <textarea class="input-group-text me-1 w-75 text-wrap text-start" autocomplete='off'> </textarea>
                                            <input type="text" class="form-control ms-1" autocomplete='off' value="" placeholder="Сумма">
                                        </div>
                                    </div>
                                </div>

                                <div class="d-grid gap-2 pt-1">
                                    <button type="button" onclick="SpendDialog.Save('`+ v.detailId + `')" class="btn btn-success p-2">Сохранить</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                `;

            $("#spend_list").append(model);
        });


        $('#flush-collapse10').collapse('show');
    }

    static Save(detailId) {

        const regexp = new RegExp("^[0-9]*$");
        var models = [];

        $("div[data-detailid=" + detailId + "]").each(function (i, v) {

            var obj = $(v);
            var costId = obj.attr("data-costId");
            var detailId = obj.attr("data-detailId");
            var spendId = obj.attr("data-spendid");
            var oldValue = obj.attr("data-value");
            var oldComment = $.base64.decode(obj.attr("data-comment"));
            var newValue = obj.find("input[type=text]").val();
            var newComment = obj.find("textarea").val();

            if (oldValue.trim() != newValue.trim() || oldComment.trim() != newComment.trim()) {

                var model = {
                    "costId": costId,
                    "id": spendId,
                    "costDetailId": detailId,
                    "value": newValue.trim(),
                    "comment": newComment.trim(),
                    "image": ""
                };

                if ((model.value == "" && model.comment != "") ||
                    (model.comment == "" && model.value != "")) {
                    Tools.PushNotification("fail", "Сумма не может быть пустой!");
                    return;
                }

                if (!regexp.test(model.value)) {
                    Tools.PushNotification("fail", "Сумма может содержать только цифры!");
                    return;
                }

                models.push(model);
            }
        });

        $.each(models, function (i, model) {

            if (model.id == Tools.GuidEmpty()) {
                // Create

                var req = AjaxRequest.Post("/v1/Spend", model, function (data) {
                    SpendDialog.Init(SpendDialog.spendId);
                });

                AjaxRequestEngine.Execute(req);

            } else {

                if (model.comment == "" && model.value == "") {

                    // Delete
                    var req = AjaxRequest.Delete("/v1/Spend/" + model.id, function (data) {
                        SpendDialog.Init(SpendDialog.spendId);
                    });

                    AjaxRequestEngine.Execute(req);

                } else {

                    // Update
                    var req = AjaxRequest.Put("/v1/Spend", model, function (data) {
                        SpendDialog.Init(SpendDialog.spendId);
                    });

                    AjaxRequestEngine.Execute(req);
                }
            }
        });
    }



}

Tools.AddDialog(SpendDialog);

// #### dialog-model.js
﻿class DialogModel {
    constructor(name, object) {
        this.Name = name;
        this.Object = object;
    }

}

// #### plan-model.js
﻿class PlanModel {
    constructor() {
        this.Id = undefined;
        this.Start = undefined;
        this.End = undefined;
        this.Name = undefined;
        this.Balance = undefined;
        this.UserMembers = []
    }
}

// #### request.js
﻿class AjaxRequest {
    constructor() {
        this.url = undefined;
        this.method = undefined;
        this.dataType = undefined;
        this.contentType = undefined;
        this.data = undefined;
        this.onSuccess = undefined;
        this.onError = undefined;
    }

    static Post(url, data, onSuccess, onError) {
        var request = new AjaxRequest();
        request.url = url;
        request.method = 'post'
        request.dataType = "json";
        request.contentType = "application/json";
        request.data = JSON.stringify(data);
        request.onSuccess = onSuccess;
        request.onError = onError;
        return request;
    }

    static Put(url, data, onSuccess, onError) {
        var request = new AjaxRequest();
        request.url = url;
        request.method = 'put'
        request.dataType = "json";
        request.contentType = "application/json";
        request.data = JSON.stringify(data);
        request.onSuccess = onSuccess;
        request.onError = onError;
        return request;
    }

    static Get(url, onSuccess, onError) {
        var request = new AjaxRequest();
        request.url = url;
        request.method = 'get';
        request.dataType = "json";
        request.contentType = "application/json";
        request.data = undefined;
        request.onSuccess = onSuccess;
        request.onError = onError;
        return request;
    }

    static Delete(url, onSuccess, onError) {
        var request = new AjaxRequest();
        request.url = url;
        request.method = 'delete';
        request.dataType = "text";
        request.contentType = "application/json";
        request.data = undefined;
        request.onSuccess = onSuccess;
        request.onError = onError;
        return request;
    }
}