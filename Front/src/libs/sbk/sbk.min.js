

// -= Auto generated 27-11-2024 15:30:38 =-


// #### session.js
﻿class Session {
    static Dialogs = [];
    static CurrentPage = null;
}

// #### tools.js
﻿class Tools {

    static GuidEmpty() {
        return "00000000-0000-0000-0000-000000000000";
    }

    static AddDialog(dialog) {
        if (typeof dialog.Init != "undefined") {
            Session.Dialogs.push(dialog);
        } else {
            console.warn("Dialog doesn't have Init function!");
        }
    }

    static ShowLoading() {
        $.blockUI({
            message: $('div.block-ui'),
            fadeIn: 700,
            fadeOut: 700,
            //timeout: 2000,
            showOverlay: true,
            centerY: true,
            css: {
                //width: '350px',
                //top: '10px',
                //left: '',
                //right: '10px',
                border: 'none',
                padding: '15px',
                backgroundColor: '#000',
                '-webkit-border-radius': '10px',
                '-moz-border-radius': '10px',
                opacity: .6,
                color: '#fff'
            }
        });
    }

    static HideLoading() {
        $.unblockUI();
    }

    static backData = []
    static GoBack() {
        if (Tools.backData.length < 2) {
            return;
        }

        var cur = Tools.backData[Tools.backData.length - 2];
        var items = [];

        for (let i = 0; i <= Tools.backData.length - 2; i++) {
            items.push(Tools.backData[i]);
        }
        Tools.backData = items;

        Tools.SwichDialog(cur.pageName, cur.params, true);
    }

    static SwichDialog(pageName, params, isBack) {

        if (typeof isBack == "undefined") {
            Tools.backData.push({ pageName: pageName, params: params });
        }

        if (Session.CurrentPage === pageName) {
            console.log("Page '" + pageName + "' already opened!");
            return;
        }

        var activeDialog = $(".dialog:visible").first();
        var width = $(window).width() + 10;
        var newDialog = $("#" + pageName);

        newDialog.css('left', '-' + width + 'px');
        newDialog.css('position', 'absolute');
        newDialog.css('width', width + "px");

        newDialog.show();

        activeDialog.css('position', 'absolute');
        activeDialog.css('top', '60px');
        activeDialog.css('left', '0px');
        activeDialog.css('width', width + "px");


        activeDialog.animate({
            left: width
        }, 'slow', function () {
            activeDialog.hide();
            activeDialog.css('position', 'relative');
            activeDialog.css('top', 'auto');
            activeDialog.css('left', 'auto');
            activeDialog.css('width', "auto");
        });

        newDialog.animate({
            left: 0
        }, 'slow', function () {
            newDialog.css('position', 'relative');
            newDialog.css('top', 'auto');
            newDialog.css('left', 'auto');
            newDialog.css('width', "auto");
        });

        Session.CurrentPage = pageName;
        var dialogs = Session.Dialogs;
        for (let i = 0; i < dialogs.length; i++) {
            if (dialogs[i].name == pageName) {
                dialogs[i].Init(params);
                break;
            }
        }
    }
}

// #### _dialog-base.js
﻿class DialogBase {

    static name = "NONE";

    static Init() {
        console.log("Init not implemented!");
    }
}

// #### auth.js
﻿class Auth {

    static getToken(userName, password, onSuccess, onError) {

        $.ajax({
            url: BASE_HOST + '/connect/token',
            method: 'post',
            dataType: 'json',
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            data: "grant_type=password&username=" + userName + "&password=" + password + "&client_id=client",
            success: function (data) {
                data["created"] = new Date();
                localStorage.setItem('auth', JSON.stringify(data));

                if (typeof onSuccess != "undefined") {
                    onSuccess();
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                // xhr.status - status code
                console.log("Error AUTH: " + xhr + "Code:" + xhr.status);

                if (typeof onError != "undefined") {
                    onError();
                }
            }
        });
    }

    static refreshToken(onSuccess, onError) {

        var data = JSON.parse(localStorage.getItem('auth'));

        if (typeof data == "undefined") {
            console.log("refreshToken. There is no 'auth' in localStorage");
            return;
        }

        var refresh_token = data.refresh_token;

        if (typeof refresh_token == "undefined") {
            console.log("refreshToken. There is no 'refresh_token' in 'auth' in localStorage");
            return;
        }

        $.ajax({
            url: BASE_HOST + '/connect/token',
            method: 'post',
            dataType: 'json',
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            data: "grant_type=refresh_token&client_id=client&refresh_token=" + refresh_token,
            success: function (data) {
                data["created"] = new Date();
                localStorage.setItem('auth', JSON.stringify(data));

                if (typeof onSuccess != "undefined") {
                    onSuccess();
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                // xhr.status - status code
                console.log("Error AUTH: " + xhr + "Code:" + xhr.status);

                if (typeof onError != "undefined") {
                    onError();
                }
            }
        });
    }
}

// #### base-api.js
﻿

// #### request-engine.js
﻿class AjaxRequestEngine {

    static Execute(request) {
        if (!request instanceof AjaxRequest) {
            console.log("Request has invalid type: " + request.constructor.name);
            return;
        }

        var token = JSON.parse(localStorage.getItem('auth')).access_token;
        if (typeof token == "undefined" || token == null) {
            Tools.SwichDialog("auth_dialog");
            return;
        }

        $.ajax({
            url: BASE_HOST + request.url,
            method: request.method,
            dataType: request.dataType,
            contentType: request.contentType,
            data: request.data,
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {

                if (typeof request.onSuccess != "undefined") {
                    request.onSuccess(data);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {

                if (xhr.status == 401) { // Unauthorized
                    Auth.refreshToken(function () {

                        var token = JSON.parse(localStorage.getItem('auth')).access_token;
                        if (typeof token == "undefined" || token == null) {
                            Tools.SwichDialog("auth_dialog");
                            return;
                        }

                        $.ajax({
                            url: BASE_HOST + request.url,
                            method: request.method,
                            dataType: request.dataType,
                            contentType: request.contentType,
                            data: request.data,
                            headers: { "Authorization": "Bearer " + token },
                            success: function (data) {

                                if (typeof request.onSuccess != "undefined") {
                                    request.onSuccess(data);
                                }
                            },
                            error: function (xhr, ajaxOptions, thrownError) {

                                if (xhr.status == 401) { // Unauthorized
                                    Tools.SwichDialog("auth_dialog");
                                    return;
                                }

                                if (typeof request.onError != "undefined") {
                                    request.onError(data);
                                }
                            }
                        });

                    }, function () {
                        Tools.SwichDialog("auth_dialog");
                        return;
                    });
                }

                if (typeof request.onError != "undefined") {
                    request.onError(data);
                }
            }
        });
    }
}

// #### settings.js
﻿var BASE_HOST = "https://localhost:6001/api"

// #### auth-dialog.js
﻿class AuthDialog extends DialogBase {

    static name = "auth_dialog";

    static Show() {
        $.blockUI({
            message: $('#login_form'),
            css: { width: '80%', left: '10%' }
        });
    }

    static Login() {

        var username = $("#auth_username").val();
        var password = $("#auth_password").val();

        var onSuccess = function () {
            Tools.SwichDialog("home_dialog");
        };

        var onError = function () {
            $("#auth_loader").hide();
            $("#auth_button").show();
        };

        Auth.getToken(username, password, onSuccess, onError);

        $("#auth_loader").show();
        $("#auth_button").hide();
    }
}

Tools.AddDialog(AuthDialog);

// #### cost-dialog.js
﻿class CostDialog extends DialogBase {

    static name = "cost_dialog";
    static planId = undefined;

    static Init(planId) {
        console.log("Init cost:" + planId);

        CostDialog.planId = planId;

        if (typeof planId == "undefined") {
            console.error("Plan not exist");
            return;
        }

        Tools.ShowLoading();
        var req = AjaxRequest.Get("/v1/Cost/byPlan/" + planId, function (data) {
            console.log("loading users");
            Tools.HideLoading();

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            CostDialog.LoadingCosts(data.result);
        }, function () { Tools.HideLoading(); });

        AjaxRequestEngine.Execute(req);
    }

    static GoToNewCosts() {
        Tools.SwichDialog("new_cost_dialog", { "plan": CostDialog.planId, "cost": undefined });
    }

    static EditCost(costId) {
        Tools.SwichDialog("new_cost_dialog", { "plan": CostDialog.planId, "cost": costId });
    }

    static LoadingCosts(costs) {

        /**
        {
          "result": [
            {
              "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "planId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
              "name": "string",
              "costDetails": [
                {
                  "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                  "date": "2024-11-27T10:58:24.427Z",
                  "value": 5000000
                }
              ]
            }
          ]
        }
         */


        $("#cost_list a").remove();
        var totalSum = 0;

        $.each(costs, function (i, v) {

            var sum = 0;
            $.each(v.costDetails, function (i, v) {
                sum += v.value;
            });

            totalSum += sum;

            var item = `
            <a href="#" onclick="CostDialog.EditCost('`+ v.id + `')" class="cost-item list-group-item list-group-item-action" aria-current="true">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">` + v.name + `</h5>
                    <small> * </small>
                </div>
                <small>Баланс: `+ sum.toLocaleString() + ` руб.</small>
            </a>
            `;

            $("#cost_list").append(item);
        });

        $("#total_sum").html("Сумма: " + totalSum.toLocaleString() + " руб");

        $('.cost-item').hover(
            function () { $(this).addClass('active') },
            function () { $(this).removeClass('active') }
        );

    }

}

Tools.AddDialog(CostDialog);

// #### home-dialog.js
﻿class HomeDialog extends DialogBase {

    static name = "home_dialog";

    static Init() {
        console.log("Init home");

        $('.navbar-nav>li>a:not([data-bs-toggle^="dropdown"])').on('click', function (i, v) {
            $('.navbar-collapse').collapse('hide');
        });

        $('.dropdown-menu>li>a:not([data-bs-toggle^="dropdown"])').on('click', function (i, v) {
            $('.navbar-collapse').collapse('hide');
        });

        var req = AjaxRequest.Get("/v1/PlanStatus", function (data) {
            console.log("loading plan");

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            HomeDialog.LoadingForm(data.result);
        });

        AjaxRequestEngine.Execute(req);

        var req = AjaxRequest.Get("/v1/PlanCosts", function (data) {
            console.log("loading menu");

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            HomeDialog.LoadingMenu(data.result);
        });

        AjaxRequestEngine.Execute(req);

        


    }

    static LoadingForm(data) {

    }

    static LoadingMenu() {

    }

}

Tools.AddDialog(HomeDialog);

// #### new-cost-dialog.js
﻿class NewCostDialog extends DialogBase {

    static name = "new_cost_dialog";
    static planId = undefined;
    static costId = undefined;


    static Init(model) {
        console.log("Init new cost. Plan:" + model.plan + ", Cost:" + model.cost);

        NewCostDialog.planId = model.plan;
        NewCostDialog.costId = model.cost;

        $('#cost_generator').collapse('hide');

        $("#cost_accordion").find("button[data-toggle=collapse]").on("click", function () {
            $(".collapse").collapse('hide');
            var id = $(this).attr("data-target");
            $(id).collapse('show');
        });

        if (typeof model.cost == "undefined") {
            NewCostDialog.costId = Tools.GuidEmpty();
            $("#cost_costid").val(Tools.GuidEmpty());
        }

        if (typeof NewCostDialog.planId == "undefined") {
            console.error("plain id is null");
            return;
        }

        if (typeof model.cost != "undefined") {

            Tools.ShowLoading();
            var req = AjaxRequest.Get("/v1/Cost/" + NewCostDialog.costId, function (data) {
                console.log("loading costs");
                Tools.HideLoading();

                if (typeof data.result == "undefined") {
                    console.error(data);
                    return;
                }

                NewCostDialog.LoadingCosts(data.result);
            }, function () { Tools.HideLoading(); });

            AjaxRequestEngine.Execute(req);

        } else {

            Tools.ShowLoading();
            var req = AjaxRequest.Get("/v1/Cost/generate/" + NewCostDialog.planId, function (data) {
                console.log("generate costs");
                Tools.HideLoading();

                if (typeof data.result == "undefined") {
                    console.error(data);
                    return;
                }

                NewCostDialog.LoadingCosts(data.result);
            }, function () { Tools.HideLoading(); });

            AjaxRequestEngine.Execute(req);
        }


       

    }

    static LoadingCosts(costs) {

        /*
        {
          "result": {
            "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "planId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "name": "string",
            "costDetails": [
              {
                "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "date": "2024-11-27T09:52:33.751Z",
                "value": 5000000
              }
            ]
          }
        }
        */


        $("#cost_planid").val(costs.planId);
        $("#cost_name").val(costs.name);

        $("div.cost-details-item").remove();
        $.each(costs.costDetails, function (i, v) {

            var date = new Date(v.date);

            var item = `
                <div class="mb-3 cost-details-item">
                    <div class="col-auto">
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <div class="input-group-text"> `+ date.toLocaleDateString("ru-RU") + ` </div>
                            </div>
                            <input type="text" code='` + v.id + `' date='` + v.date + `' value='` + v.value + `' class="cost-detail form-control" placeholder="">
                        </div>
                    </div>
                </div>
                `;

            $("#cost_details").append(item);
        });
        
    }
    static Delete() {
        var req = AjaxRequest.Delete("/v1/Cost/" + NewCostDialog.costId, function (data) {
            Tools.SwichDialog("cost_dialog", NewCostDialog.planId);
        });

        AjaxRequestEngine.Execute(req);
    }


    static Save() {

        var costDetails = [];

        $(".cost-detail").each(function (i, v) {
            costDetails.push({
                "id": $(v).attr("code"),
                "date": $(v).attr("date"),
                "value": $(v).val()
            });
        });

        var model = {
            "id": NewCostDialog.costId,
            "planId": NewCostDialog.planId,
            "name": $("#cost_name").val(),
            "costDetails": costDetails
        };

        var req = AjaxRequest.Post("/v1/Cost", model, function (data) {

            Tools.SwichDialog("cost_dialog", NewCostDialog.planId); 
        });

        AjaxRequestEngine.Execute(req);
    }

    static Cancel() {
        Tools.SwichDialog("cost_dialog", NewCostDialog.planId);
    }
}

Tools.AddDialog(NewCostDialog);

// #### new-plan-dialog.js
﻿class NewPlanDialog extends DialogBase {

    static name = "new_plan_dialog";
    static planId = undefined;

    static Init(planId) {
        console.log("Init new plan");

        $("#newpaln_id").val("");
        $("#newplan_start").val("");
        $("#newplan_end").val("");
        $("#newplan_name").val("");
        $("#newplan_balance").val("");
        $('#newplan_users').val([]);
        $('#newplan_users').trigger('change');

        $('#newplan_users').select2({
            theme: "bootstrap-5",
            width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',
            placeholder: $(this).data('placeholder'),
            closeOnSelect: false,
        });


        $("#new_plan_accordion").find("button[data-toggle=collapse]").on("click", function () {
            $(".collapse").collapse('hide');
            var id = $(this).attr("data-target");
            $(id).collapse('show');
        });


        $('#collapseOne').collapse('hide');
        $("#collapseTwo").collapse('hide');


        Tools.ShowLoading();
        // Loading user list
        var req = AjaxRequest.Get("/v1/User", function (data) {
            console.log("loading users");

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            NewPlanDialog.LoadingUsers(data.result);

            // Loading existing plan
            if (typeof planId != "undefined") {
                NewPlanDialog.planId = planId;
                var req = AjaxRequest.Get("/v1/Plan/" + planId, function (data) {

                    Tools.HideLoading();
                    if (typeof data.result == "undefined") {
                        console.error(data);
                        return;
                    }

                    NewPlanDialog.LoadPlan(data.result);
                    $("#collapseTwo").collapse('show');
                }, function () { Tools.HideLoading(); });

                AjaxRequestEngine.Execute(req);
            } else {
                $('#collapseOne').collapse('show');
                Tools.HideLoading();
            }

        }, function () { Tools.HideLoading(); });

        AjaxRequestEngine.Execute(req);
    }

    static GoToCost() {
        Tools.SwichDialog("cost_dialog", NewPlanDialog.planId ); 
    }

    static LoadPlan(plan) {

        $("#newpaln_accordion").html("Изменить план: " + plan.name);
        $("#newpaln_id").val(plan.id);
        $("#newplan_start").val(plan.start.split('T')[0].replace("-", "/").replace("-", "/"));
        $("#newplan_end").val(plan.end.split('T')[0].replace("-", "/").replace("-", "/"));
        $("#newplan_name").val(plan.name);
        $("#newplan_balance").val(plan.balance);

        var arr = [];
        $.each(plan.userMembers, function (i, v) {
            arr.push(v);
        });

        $('#newplan_users').val(arr);
        $('#newplan_users').trigger('change');
    }

    static LoadingUsers(users) {

        $.each(users, function (i, v) {

            var data = {
                id: v.id,
                text: v.name
            };

            var newOption = new Option(data.text, data.id, false, false);
            $('#newplan_users').append(newOption).trigger('change');
        });
    }

    static AddNewPlan() {

        var userMembers = [];

        var items = $('#newplan_users').select2('data');
        $.each(items, function (i, v) {
            userMembers.push(v.id);
        });

        //$("#newplan_users").find('option:selected').each(function (i, v) {
        //    userMembers.push($(v).attr('id'));
        //});

        var planId = $("#newpaln_id").val();

        if (typeof planId == "undefined" || planId.length < 10) {
            planId = Tools.GuidEmpty();
        }

        var model = {
            "id": planId,
            "start": $("#newplan_start").val(),
            "end": $("#newplan_end").val(),
            "name": $("#newplan_name").val(),
            "balance": $("#newplan_balance").val(),
            "userMembers": userMembers
        }

        var req = AjaxRequest.Post("/v1/Plan", model, function (data) {

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            Tools.SwichDialog("plan_dialog");
        });

        AjaxRequestEngine.Execute(req);
    }

    static Cancel() {
        Tools.SwichDialog("plan_dialog");
    }
}

Tools.AddDialog(NewPlanDialog);

// #### plan-dialog.js
﻿class PlanDialog extends DialogBase {

    static name = "plan_dialog";

    static Init() {
        console.log("Init plan");

        Tools.ShowLoading();
        var req = AjaxRequest.Get("/v1/Plan", function (data) {
            console.log("loading users");
            Tools.HideLoading();

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            PlanDialog.LoadingPlans(data.result);
        }, function () { Tools.HideLoading(); });

        AjaxRequestEngine.Execute(req);
    }

    static GoToNewPlan() {
        Tools.SwichDialog("new_plan_dialog");
    }

    static EditPlan(code) {
        Tools.SwichDialog("new_plan_dialog", code);
    }

    static LoadingPlans(plans) {

        function datediff(first, second) {
            return Math.round((second - first) / (1000 * 60 * 60 * 24));
        }

        $("#plan_list a").remove();

        $.each(plans, function (i, v) {

            var startDate = new Date(v.start);
            var endDate = new Date(v.end);
            var diff = datediff(startDate, endDate);

            var item = `
            <a href="#" onclick="PlanDialog.EditPlan('`+ v.id + `')" class="plan-item list-group-item list-group-item-action" aria-current="true">
            <div class="d-flex w-100 justify-content-between">

                <h5 class="mb-1">` + v.name + `</h5>
                <small>`+ diff + ` дней</small>
            </div>
            <p class="mb-1">Начиная с `+ startDate.toLocaleDateString("ru-RU") + ` по ` + endDate.toLocaleDateString("ru-RU") + `</p>
            <small>Баланс: `+ v.balance + ` руб.</small>
        </a>
            `;

            $("#plan_list").append(item);
        });

        $('.plan-item').hover(
            function () { $(this).addClass('active') },
            function () { $(this).removeClass('active') }
        );

    }

}

Tools.AddDialog(PlanDialog);

// #### settings-dialog.js
﻿class SettingsDialog extends DialogBase {

    static name = "settings_dialog";

    static Init() {
        console.log("Init plan");
    }

    static GoToPlan() {
        Tools.SwichDialog("plan_dialog");

    }
  
}

Tools.AddDialog(SettingsDialog);

// #### dialog-model.js
﻿class DialogModel {
    constructor(name, object) {
        this.Name = name;
        this.Object = object;
    }

}

// #### plan-model.js
﻿class PlanModel {
    constructor() {
        this.Id = undefined;
        this.Start = undefined;
        this.End = undefined;
        this.Name = undefined;
        this.Balance = undefined;
        this.UserMembers = []
    }
}

// #### request.js
﻿class AjaxRequest {
    constructor() {
        this.url = undefined;
        this.method = undefined;
        this.dataType = undefined;
        this.contentType = undefined;
        this.data = undefined;
        this.onSuccess = undefined;
        this.onError = undefined;
    }

    static Post(url, data, onSuccess, onError) {
        var request = new AjaxRequest();
        request.url = url;
        request.method = 'post'
        request.dataType = "json";
        request.contentType = "application/json";
        request.data = JSON.stringify(data);
        request.onSuccess = onSuccess;
        request.onError = onError;
        return request;
    }

    static Get(url, onSuccess, onError) {
        var request = new AjaxRequest();
        request.url = url;
        request.method = 'get';
        request.dataType = "json";
        request.contentType = "application/json";
        request.data = undefined;
        request.onSuccess = onSuccess;
        request.onError = onError;
        return request;
    }

    static Delete(url, onSuccess, onError) {
        var request = new AjaxRequest();
        request.url = url;
        request.method = 'delete';
        request.dataType = "none";
        request.contentType = "application/json";
        request.data = undefined;
        request.onSuccess = onSuccess;
        request.onError = onError;
        return request;
    }
}