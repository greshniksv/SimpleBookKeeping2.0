

// -= Auto generated 25-11-2024 22:11:18 =-


// #### session.js
﻿class Session {
    static Dialogs = [];
    static CurrentPage = null;
}

// #### tools.js
﻿class Tools {

    static AddDialog(dialog) {
        if (typeof dialog.Init != "undefined") {
            Session.Dialogs.push(dialog);
        } else {
            console.warn("Dialog doesn't have Init function!");
        }
    }

    static ShowLoading() {
        $.blockUI({
            message: $('div.block-ui'),
            fadeIn: 700,
            fadeOut: 700,
            //timeout: 2000,
            showOverlay: true,
            centerY: true,
            css: {
                //width: '350px',
                //top: '10px',
                //left: '',
                //right: '10px',
                border: 'none',
                padding: '15px',
                backgroundColor: '#000',
                '-webkit-border-radius': '10px',
                '-moz-border-radius': '10px',
                opacity: .6,
                color: '#fff'
            }
        });
    }

    static HideLoading() {
        $.unblockUI();
    }

    static SwichDialog(pageName) {

        if (Session.CurrentPage === pageName) {
            console.log("Page '" + pageName + "' already opened!");
            return;
        }

        var activeDialog = $(".dialog:visible").first();
        var width = $(window).width() + 10;
        var newDialog = $("#" + pageName);

        newDialog.css('left', '-' + width + 'px');
        newDialog.css('position', 'absolute');
        newDialog.css('width', width+"px");

        newDialog.show();

        activeDialog.css('position', 'absolute');
        activeDialog.css('top', '60px');
        activeDialog.css('left', '0px');
        activeDialog.css('width', width + "px");


        activeDialog.animate({
            left: width
        }, 'slow', function () {
            activeDialog.hide();
            activeDialog.css('position', 'relative');
            activeDialog.css('top', 'auto');
            activeDialog.css('left', 'auto');
            activeDialog.css('width', "auto");
        });

        newDialog.animate({
            left: 0
        }, 'slow', function () {
            newDialog.css('position', 'relative');
            newDialog.css('top', 'auto');
            newDialog.css('left', 'auto');
            newDialog.css('width', "auto");
        });

        Session.CurrentPage = pageName;
        var dialogs = Session.Dialogs;
        for (let i=0; i < dialogs.length; i++) {
            if (dialogs[i].name == pageName) {
                dialogs[i].Init();
                break;
            }
        }
    }
}

// #### _dialog-base.js
﻿class DialogBase {

    static name = "NONE";

    static Init() {
        console.log("Init not implemented!");
    }
}

// #### auth.js
﻿class Auth {

    static getToken(userName, password, onSuccess, onError) {

        $.ajax({
            url: BASE_HOST + '/connect/token',
            method: 'post',
            dataType: 'json',
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            data: "grant_type=password&username=" + userName + "&password=" + password + "&client_id=client",
            success: function (data) {
                data["created"] = new Date();
                localStorage.setItem('auth', JSON.stringify(data));

                if (typeof onSuccess != "undefined") {
                    onSuccess();
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                // xhr.status - status code
                console.log("Error AUTH: " + xhr + "Code:" + xhr.status);

                if (typeof onError != "undefined") {
                    onError();
                }
            }
        });
    }

    static refreshToken(onSuccess, onError) {

        var data = JSON.parse(localStorage.getItem('auth'));

        if (typeof data == "undefined") {
            console.log("refreshToken. There is no 'auth' in localStorage");
            return;
        }

        var refresh_token = data.refresh_token;

        if (typeof refresh_token == "undefined") {
            console.log("refreshToken. There is no 'refresh_token' in 'auth' in localStorage");
            return;
        }

        $.ajax({
            url: BASE_HOST + '/connect/token',
            method: 'post',
            dataType: 'json',
            contentType: "application/x-www-form-urlencoded; charset=utf-8",
            data: "grant_type=refresh_token&client_id=client&refresh_token=" + refresh_token,
            success: function (data) {
                data["created"] = new Date();
                localStorage.setItem('auth', JSON.stringify(data));

                if (typeof onSuccess != "undefined") {
                    onSuccess();
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                // xhr.status - status code
                console.log("Error AUTH: " + xhr + "Code:" + xhr.status);

                if (typeof onError != "undefined") {
                    onError();
                }
            }
        });
    }
}

// #### base-api.js
﻿

// #### request-engine.js
﻿class AjaxRequestEngine {

    static Execute(request) {
        if (!request instanceof AjaxRequest) {
            console.log("Request has invalid type: " + request.constructor.name);
            return;
        }

        var token = JSON.parse(localStorage.getItem('auth')).access_token;
        if (typeof token == "undefined" || token == null) {
            Tools.SwichDialog("auth_dialog");
            return;
        }

        $.ajax({
            url: BASE_HOST + request.url,
            method: request.method,
            dataType: request.dataType,
            contentType: request.contentType,
            data: request.data,
            headers: { "Authorization": "Bearer " + token },
            success: function (data) {

                if (typeof request.onSuccess != "undefined") {
                    request.onSuccess(data);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {

                if (xhr.status == 401) { // Unauthorized
                    Auth.refreshToken(function () {

                        var token = JSON.parse(localStorage.getItem('auth')).access_token;
                        if (typeof token == "undefined" || token == null) {
                            Tools.SwichDialog("auth_dialog");
                            return;
                        }

                        $.ajax({
                            url: BASE_HOST + request.url,
                            method: request.method,
                            dataType: request.dataType,
                            contentType: request.contentType,
                            data: request.data,
                            headers: { "Authorization": "Bearer " + token },
                            success: function (data) {

                                if (typeof request.onSuccess != "undefined") {
                                    request.onSuccess(data);
                                }
                            },
                            error: function (xhr, ajaxOptions, thrownError) {

                                if (xhr.status == 401) { // Unauthorized
                                    Tools.SwichDialog("auth_dialog");
                                    return;
                                }

                                if (typeof request.onError != "undefined") {
                                    request.onError(data);
                                }
                            }
                        });

                    }, function () {
                        Tools.SwichDialog("auth_dialog");
                        return;
                    });
                }

                if (typeof request.onError != "undefined") {
                    request.onError(data);
                }
            }
        });
    }
}

// #### settings.js
﻿var BASE_HOST = "https://localhost:6001/api"

// #### auth-dialog.js
﻿class AuthDialog extends DialogBase {

    static name = "auth_dialog";

    static Show() {
        $.blockUI({
            message: $('#login_form'),
            css: { width: '80%', left: '10%' }
        });
    }

    static Login() {

        var username = $("#auth_username").val();
        var password = $("#auth_password").val();

        var onSuccess = function () {
            Tools.SwichDialog("home_dialog");
        };

        var onError = function () {
            $("#auth_loader").hide();
            $("#auth_button").show();
        };

        Auth.getToken(username, password, onSuccess, onError);

        $("#auth_loader").show();
        $("#auth_button").hide();
    }
}

Tools.AddDialog(AuthDialog);

// #### cost-dialog.js
﻿class CostDialog extends DialogBase {

    static name = "cost_dialog";

    static Init() {
        console.log("Init cost");
    }

  
}

Tools.AddDialog(CostDialog);

// #### home-dialog.js
﻿class HomeDialog extends DialogBase {

    static name = "home_dialog";

    static Init() {
        console.log("Init home");

        $('.navbar-nav>li>a:not([data-bs-toggle^="dropdown"])').on('click', function (i, v) {
            $('.navbar-collapse').collapse('hide');
        });

        $('.dropdown-menu>li>a:not([data-bs-toggle^="dropdown"])').on('click', function (i, v) {
            $('.navbar-collapse').collapse('hide');
        });

        var req = AjaxRequest.Get("/v1/PlanStatus", function (data) {
            console.log("loading plan");

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            HomeDialog.LoadingForm(data.result);
        });

        AjaxRequestEngine.Execute(req);

        var req = AjaxRequest.Get("/v1/PlanCosts", function (data) {
            console.log("loading menu");

            if (typeof data.result == "undefined") {
                console.error(data);
                return;
            }

            HomeDialog.LoadingMenu(data.result);
        });

        AjaxRequestEngine.Execute(req);

        


    }

    static LoadingForm(data) {

    }

    static LoadingMenu() {

    }

}

Tools.AddDialog(HomeDialog);

// #### new-plan-dialog.js
﻿class NewPlanDialog extends DialogBase {

    static name = "new_plan_dialog";

    static Init() {
        console.log("Init plan");

        //$('.datepicker').datepicker({
        //    format: 'dd/mm/yyyy',
        //    startDate: '-3d'
        //});

        $('#multiple-select-field').select2({
            theme: "bootstrap-5",
            width: $(this).data('width') ? $(this).data('width') : $(this).hasClass('w-100') ? '100%' : 'style',
            placeholder: $(this).data('placeholder'),
            closeOnSelect: false,
        });
    }

  
}

Tools.AddDialog(NewPlanDialog);

// #### plan-dialog.js
﻿class PlanDialog extends DialogBase {

    static name = "plan_dialog";

    static Init() {
        console.log("Init plan");
    }

    static GoToNewPlan() {
        Tools.SwichDialog("new_plan_dialog");
    }
  
}

Tools.AddDialog(PlanDialog);

// #### settings-dialog.js
﻿class SettingsDialog extends DialogBase {

    static name = "settings_dialog";

    static Init() {
        console.log("Init plan");
    }

    static GoToPlan() {
        Tools.SwichDialog("plan_dialog");

    }
  
}

Tools.AddDialog(SettingsDialog);

// #### dialog-model.js
﻿class DialogModel {
    constructor(name, object) {
        this.Name = name;
        this.Object = object;
    }

}

// #### plan-model.js
﻿class PlanModel {
    constructor() {
        this.Id = undefined;
        this.Start = undefined;
        this.End = undefined;
        this.Name = undefined;
        this.Balance = undefined;
        this.UserMembers = []
    }
}

// #### request.js
﻿class AjaxRequest {
    constructor() {
        this.url = undefined;
        this.method = undefined;
        this.dataType = undefined;
        this.contentType = undefined;
        this.data = undefined;
        this.onSuccess = undefined;
        this.onError = undefined;
    }

    static Post(url, data, onSuccess, onError) {
        var request = new AjaxRequest();
        request.url = url;
        request.method = 'post'
        request.dataType = "json";
        request.contentType = "application/json";
        request.data = data;
        request.onSuccess = onSuccess;
        request.onError = onError;
        return request;
    }

    static Get(url, onSuccess, onError) {
        var request = new AjaxRequest();
        request.url = url;
        request.method = 'get';
        request.dataType = "json";
        request.contentType = "application/json";
        request.data = undefined;
        request.onSuccess = onSuccess;
        request.onError = onError;
        return request;
    }
}